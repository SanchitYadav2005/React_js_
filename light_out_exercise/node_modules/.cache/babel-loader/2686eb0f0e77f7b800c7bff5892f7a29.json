{"ast":null,"code":"import _slicedToArray from \"H:\\\\React_JS_Course\\\\light_out_exercise\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"H:\\\\React_JS_Course\\\\light_out_exercise\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"H:\\\\React_JS_Course\\\\light_out_exercise\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"H:\\\\React_JS_Course\\\\light_out_exercise\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"H:\\\\React_JS_Course\\\\light_out_exercise\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"H:\\\\React_JS_Course\\\\light_out_exercise\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"H:\\\\React_JS_Course\\\\light_out_exercise\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n  function Board(props) {\n    var _this;\n    _classCallCheck(this, Board);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n\n    // TODO: set initial state\n    _this.state = {\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n      // TODO: create array-of-arrays of true/false values\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartOn);\n        }\n        board.push(row);\n      }\n      return board;\n    } /** handle changing a cell: update board & determine if winner */\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      console.log(\"flipping\");\n      var _this$props = this.props,\n        ncols = _this$props.ncols,\n        nrows = _this$props.nrows;\n      var board = this.state.board;\n      var _coord$split$map = coord.split(\"-\").map(Number),\n        _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n        y = _coord$split$map2[0],\n        x = _coord$split$map2[1];\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      // TODO: flip this cell and the cells around it\n\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      this.setState({\n        board: board\n      });\n    } /** Render game board or winning message. */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      // if the game is won, just show a winning msg & render nothing else\n\n      // TODO\n\n      // make table board\n      var tableBoard = [];\n      for (var y = 0; y < this.props.ncols; y++) {\n        var row = [];\n        var _loop = function _loop() {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 18\n            }\n          }));\n        };\n        for (var x = 0; x < this.props.nrows; x++) {\n          _loop();\n        }\n        tableBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 23\n          }\n        }, row));\n      }\n      // TODO\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }, tableBoard));\n    }\n  }]);\n  return Board;\n}(Component);\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartOn: 0.25\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","Board","_Component","_inherits","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","state","board","createBoard","_createClass","key","value","y","nrows","row","x","ncols","push","Math","random","chanceLightStartOn","flipCellsAround","coord","console","log","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","_slicedToArray","flipCell","setState","render","_this2","tableBoard","_loop","concat","createElement","isLit","flipCellsAroundMe","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","defaultProps"],"sources":["H:/React_JS_Course/light_out_exercise/src/Board.js"],"sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartOn: 0.25\n  };\n\n  constructor(props) {\n    super(props);\n    \n    // TODO: set initial state\n    this.state = {\n      board: this.createBoard(),\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let y=0; y<this.props.nrows; y++){\n      let row = [];\n      for(let x = 0; x < this.props.ncols; x++){\n        row.push(Math.random() < this.props.chanceLightStartOn)\n      }\n      board.push(row)\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    console.log(\"flipping\")\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    this.setState({board})\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    let tableBoard = [];\n    for(let y = 0; y < this.props.ncols; y++){\n      let row = [];\n      for(let x = 0; x < this.props.nrows; x++){\n        let coord = `${y}-${x}`\n        row.push(<Cell \n            key={coord} \n            isLit = {this.state.board[y][x]}\n            flipCellsAroundMe={()=> this.flipCellsAround(coord)}\n          />)\n      }\n      tableBoard.push(<tr>{row}</tr>)\n    }\n    // TODO\n    return (\n      <table className=\"Board\">\n        <tbody>\n          {tableBoard}\n        </tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}