{"ast":null,"code":"var _jsxFileName = \"H:\\\\React_JS_Course\\\\hangman_exercies\\\\src\\\\Hangman.js\";\nimport React, { Component } from \"react\";\nimport \"./Hangman.css\";\nimport img0 from \"./0.jpg\";\nimport img1 from \"./1.jpg\";\nimport img2 from \"./2.jpg\";\nimport img3 from \"./3.jpg\";\nimport img4 from \"./4.jpg\";\nimport img5 from \"./5.jpg\";\nimport img6 from \"./6.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Hangman extends Component {\n  /** by default, allow 6 guesses and use provided gallows images. */\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      nWrong: 0,\n      guessed: new Set(),\n      answer: \"apple\"\n    };\n    this.handleGuess = this.handleGuess.bind(this);\n  }\n\n  /** guessedWord: show current-state of word:\n    if guessed letters are {a,p,e}, show \"app_e\" for \"apple\"\n  */\n  guessedWord() {\n    return this.state.answer.split(\"\").map(ltr => this.state.guessed.has(ltr) ? ltr : \"_\");\n  }\n\n  /** handleGuest: handle a guessed letter:\n    - add to guessed letters\n    - if not in answer, increase number-wrong guesses\n  */\n  handleGuess(evt) {\n    let ltr = evt.target.value;\n    this.setState(st => ({\n      guessed: st.guessed.add(ltr),\n      nWrong: st.nWrong + (st.answer.includes(ltr) ? 0 : 1)\n    }));\n  }\n\n  /** generateButtons: return array of letter buttons to render */\n  generateButtons() {\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(ltr => /*#__PURE__*/_jsxDEV(\"button\", {\n      value: ltr,\n      onClick: this.handleGuess,\n      disabled: this.state.guessed.has(ltr),\n      children: ltr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this));\n  }\n\n  /** render: render game */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Hangman\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hangman\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: this.props.images[this.state.nWrong]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"Hangman-word\",\n        children: this.guessedWord()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"Hangman-btns\",\n        children: this.generateButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n}\nHangman.defaultProps = {\n  maxWrong: 6,\n  images: [img0, img1, img2, img3, img4, img5, img6]\n};\nexport default Hangman;","map":{"version":3,"names":["React","Component","img0","img1","img2","img3","img4","img5","img6","jsxDEV","_jsxDEV","Hangman","constructor","props","state","nWrong","guessed","Set","answer","handleGuess","bind","guessedWord","split","map","ltr","has","evt","target","value","setState","st","add","includes","generateButtons","onClick","disabled","children","fileName","_jsxFileName","lineNumber","columnNumber","render","className","src","images","defaultProps","maxWrong"],"sources":["H:/React_JS_Course/hangman_exercies/src/Hangman.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport \"./Hangman.css\";\nimport img0 from \"./0.jpg\";\nimport img1 from \"./1.jpg\";\nimport img2 from \"./2.jpg\";\nimport img3 from \"./3.jpg\";\nimport img4 from \"./4.jpg\";\nimport img5 from \"./5.jpg\";\nimport img6 from \"./6.jpg\";\n\nclass Hangman extends Component {\n  /** by default, allow 6 guesses and use provided gallows images. */\n  static defaultProps = {\n    maxWrong: 6,\n    images: [img0, img1, img2, img3, img4, img5, img6]\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { nWrong: 0, guessed: new Set(), answer: \"apple\" };\n    this.handleGuess = this.handleGuess.bind(this);\n  }\n\n  /** guessedWord: show current-state of word:\n    if guessed letters are {a,p,e}, show \"app_e\" for \"apple\"\n  */\n  guessedWord() {\n    return this.state.answer\n      .split(\"\")\n      .map(ltr => (this.state.guessed.has(ltr) ? ltr : \"_\"));\n  }\n\n  /** handleGuest: handle a guessed letter:\n    - add to guessed letters\n    - if not in answer, increase number-wrong guesses\n  */\n  handleGuess(evt) {\n    let ltr = evt.target.value;\n    this.setState(st => ({\n      guessed: st.guessed.add(ltr),\n      nWrong: st.nWrong + (st.answer.includes(ltr) ? 0 : 1)\n    }));\n  }\n\n  /** generateButtons: return array of letter buttons to render */\n  generateButtons() {\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(ltr => (\n      <button\n        value={ltr}\n        onClick={this.handleGuess}\n        disabled={this.state.guessed.has(ltr)}\n      >\n        {ltr}\n      </button>\n    ));\n  }\n\n  /** render: render game */\n  render() {\n    return (\n      <div className='Hangman'>\n        <h1>Hangman</h1>\n        <img src={this.props.images[this.state.nWrong]} />\n        <p className='Hangman-word'>{this.guessedWord()}</p>\n        <p className='Hangman-btns'>{this.generateButtons()}</p>\n      </div>\n    );\n  }\n}\n\nexport default Hangman;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}